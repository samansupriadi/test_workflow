name: Test Triger Manually
on:
  pull_request:
    branches:
      - staging
      - development
    types: ["closed"]
  workflow_dispatch:
    inputs:
      DeployTo:
        description: 'Deploy To'
        default: 'ALL'
        type: choice
        options:
        - ALL
        - production-relyon
        - production-uam

jobs:
  check_auth:
    if: github.event.pull_request.merged || github.event_name == 'workflow_dispatch'
    name: Check user privileges who triger the workflows
    runs-on: ubuntu-latest
    steps:
    - name: check user privilege
      run: |
        auth=${{ contains(secrets.AUTH, github.triggering_actor) }}
        if [ "$auth" != "true" ]; then
            echo "::error::Users has no privileged to run the workflows"
            exit 1
        fi
  
  validate_triger:
    needs: check_auth
    if: github.event_name == 'workflow_dispatch'
    name: Validate triger workflows
    runs-on: ubuntu-latest
    steps:
      - name: Validate triger workflows
        run: |
          validate=${{ github.ref_name  == 'main' && true || startsWith(github.event.ref, 'refs/tags') && true || false }}
          if [ "$validate" != "true" ]; then
              echo "::error::Worflow only can triger manually from tag and main branch"
              exit 1
          fi
          
  set_target_env:
    needs:  [check_auth]
    if: needs.check_auth.result  == 'success'
    name: Define Environment
    runs-on: ubuntu-latest
    outputs:
      env_app: ${{ steps.set_env.outputs.env_value }}
    steps:
      - id: set_env
        run: |
          ## valiadsi input harus dari main untuk workflow dispatch belum atau dari tag
          #belum di coba juga kalo misalkan yang di deploy hanya ke salah satu saja yang ingin di deploy bukan all
          #belum di coba juga nanti kalo tag branch name nya jadi gimana

          
          
          
          getBranchName=${{ github.event_name == 'pull_request' && github.base_ref || github.event_name == 'workflow_dispatch' &&  github.ref_name}}   


          env_value=0
          if [[ "$getBranchName" == 'main' ]]; then
              env_value='production'
          elif [[ "$getBranchName" == 'staging' ]]; then
              env_value='staging'
          elif [[ "$getBranchName" == 'development' ]]; then
              env_value='development'
          fi

          echo "env_value=$env_value" >> "$GITHUB_OUTPUT"
  


  env-list:
    name: List deploy to ${{ needs.set_target_env.outputs.env_app }}
    needs: set_target_env
    if: needs.set_target_env.outputs.env_app != '0'
    runs-on: ubuntu-latest
    outputs:
      lists: ${{ steps.list_deploy.outputs.ListDeploy }}
    steps:
      - id: list_deploy
        run: |
          envs=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{secrets.TOKEN}}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ vars.REPO }}/environments | \
          jq -r --arg target_env "${{ needs.set_target_env.outputs.env_app }}" \
          '.environments[] | select(.name | contains($target_env)) | {project: .name}')
          matrix_output=$(echo "$envs" | jq -s -c '{include: [.[]]}')
          echo "ListDeploy=$matrix_output" >> $GITHUB_OUTPUT

  triger-deploy:
    name: Triger to deploy ${{ matrix.project }}
    environment:
      name: ${{ matrix.project }}
    needs:  env-list
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.env-list.outputs.lists) }}
    steps:
      - run: |
          echo "Matrix - Project ${{ matrix.project }} ${{ vars.TEST }}"



 
